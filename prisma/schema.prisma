// ---------- Generator & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  ADMIN
  USER
}

enum ReadingStatus {
  WANT_TO_READ
  READING
  READ
  ABANDONED
}

enum MediaFormat {
  HARDCOVER
  PAPERBACK
  EBOOK
  AUDIOBOOK
}

enum EditionContributorRole {
  TRANSLATOR
  ILLUSTRATOR
  EDITOR
  NARRATOR
  PREFACE_AUTHOR
}

// ---------- People & publishers ----------
model Person {
  id       String   @id @default(uuid())
  name     String
  slug     String   @unique
  sortName String?
  aliases  String[] @default([])

  bio            String?
  imageUrl       String?
  imagePublicId  String?
  birthDate      DateTime?
  deathDate      DateTime?
  nationality    String?
  imageCredit    String?
  imageSourceUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authoredBooks        BookAuthor[]
  editionContributions EditionContributor[]

  @@index([name])
  @@index([sortName])
}

model Publisher {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  editions EditionPublisher[]

  @@index([name])
}

// ---------- Users ----------
model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.Citext
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(USER)

  books          UserBook[]
  comments       Comment[]
  commentRatings CommentRating[]
  userRatings    UserRating[]
}

// ---------- Books & editions ----------
model Book {
  id                   String    @id @default(uuid())
  slug                 String?   @unique
  title                String
  addedAt              DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  firstPublicationDate DateTime?
  averageRating        Float?
  ratingCount          Int?

  authors  BookAuthor[]
  editions Edition[]

  genres      BookGenre[]
  comments    Comment[]
  userBook    UserBook[]
  userRatings UserRating[]

  @@index([addedAt])
  @@index([title])
}

model BookAuthor {
  bookId   String
  personId String
  order    Int?

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([bookId, personId])
  @@index([personId])
  @@index([bookId, order])
}

model Edition {
  id     String @id @default(uuid())
  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  isbn13 String? @unique
  isbn10 String? @unique

  language        String?
  publicationDate DateTime?
  pageCount       Int?
  format          MediaFormat?
  coverUrl        String?
  coverPublicId   String?
  title           String?
  subtitle        String?
  description     String?

  contributors EditionContributor[]
  publishers   EditionPublisher[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserBook  UserBook[]

  @@index([bookId])
  @@index([language])
  @@index([publicationDate])
  @@index([bookId, language, publicationDate])
  @@index([bookId, language, title])
  @@index([bookId, language, subtitle])
}

model EditionPublisher {
  editionId   String
  publisherId String
  order       Int?

  edition   Edition   @relation(fields: [editionId], references: [id], onDelete: Cascade)
  publisher Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  @@id([editionId, publisherId])
  @@index([publisherId])
  @@index([editionId, order])
}

model EditionContributor {
  editionId String
  personId  String
  role      EditionContributorRole
  order     Int?

  edition Edition @relation(fields: [editionId], references: [id], onDelete: Cascade)
  person  Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([editionId, personId, role])
  @@index([personId])
  @@index([editionId, order])
}

// ---------- Genres ----------
model Genre {
  id           String             @id @default(uuid())
  slug         String             @unique
  books        BookGenre[]
  translations GenreTranslation[]
}

model GenreTranslation {
  id      String @id @default(uuid())
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id])

  language String
  name     String

  @@unique([genreId, language])
}

model BookGenre {
  bookId  String
  genreId String

  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId])
  @@index([genreId])
}

// ---------- Ratings & comments ----------
model UserRating {
  userId    String
  bookId    String
  rating    Int      @db.SmallInt // enforce 1..5 via DB CHECK or w aplikacji
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([bookId, userId])
  @@index([bookId])
  @@index([userId])
}

model Comment {
  id        String          @id @default(uuid())
  content   String
  addedAt   DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  authorId  String
  author    User            @relation(fields: [authorId], references: [id])
  parentId  String?
  parent    Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]       @relation("CommentReplies")
  ratings   CommentRating[]

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId, addedAt])
  @@index([parentId])
}

model CommentRating {
  id        String  @id @default(uuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value Int // +1 / -1; dodaj DB CHECK lub walidację w kodzie

  @@unique([commentId, userId])
  @@index([userId])
}

// ---------- User ↔ Book ----------
model UserBook {
  userId        String
  bookId        String
  editionId     String?
  readingStatus ReadingStatus @default(WANT_TO_READ)
  addedAt       DateTime      @default(now())
  note          String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book    Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  edition Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)

  @@id([bookId, userId])
  @@index([editionId])
  @@index([userId, addedAt])
  @@index([userId, readingStatus, addedAt])
}
