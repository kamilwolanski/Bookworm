// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReadingStatus {
  WANT_TO_READ
  READING
  READ
  ABANDONED
}

enum GenreSlug {
  FANTASY
  SCIENCE_FICTION
  THRILLER
  ROMANCE
  NON_FICTION
  HORROR
  MYSTERY
  HISTORY
  BIOGRAPHY
  POETRY
  DRAMA
  ADVENTURE
  CLASSICS
  CHILDREN
  YOUNG_ADULT
  SELF_HELP
  HEALTH
  TECHNOLOGY
  PHILOSOPHY
  RELIGION
  ART
  TRAVEL
  SATIRE
  GOTHIC
  DYSTOPIA
  MEMOIR
  CRIME
  DETECTIVE
  ESSAY
  HUMOR
  COOKING
  BUSINESS
  EDUCATION
  PSYCHOLOGY
  POLITICS
  SPORT
  TRUE_CRIME
  FAIRY_TALES
  WESTERN
  LGBTQ
  CULTURE
  COMICS
  GRAPHIC_NOVEL
  ESSAYS
  LITERARY_FICTION
  SPIRITUALITY
  ENVIRONMENT
  MUSIC
  CLASSIC_FICTION
  CONTEMPORARY_FICTION
  URBAN_FANTASY
  HISTORICAL_FICTION
  MAGICAL_REALISM
  SHORT_STORIES
  FANFICTION
  SCIENCE
  ASTRONOMY
  MATHEMATICS
  ECONOMICS
  PARENTING
  MINDFULNESS
  PRODUCTIVITY
  PERSONAL_DEVELOPMENT
  ANTHROPOLOGY
  SOCIOLOGY
  GENDER_STUDIES
  RACE_AND_ETHNICITY
  DESIGN
  PHOTOGRAPHY
  ARCHITECTURE
  FASHION
  GAMEBOOK
  ZINES
  MYTHOLOGY
  FOLKLORE
  AUTOBIOGRAPHY
  ANIMALS
  LANGUAGE
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  books         Book[] // relacja: jeden user → wiele książek
  createdAt     DateTime        @default(now())
  comments      Comment[]
  CommentRating CommentRating[]
}

model GenreTranslation {
  id      String @id @default(uuid())
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id])

  language String // np. "pl", "en", "de"
  name     String // tłumaczenie nazwy gatunku

  @@unique([genreId, language]) // unikalność tłumaczenia na dany język
}

model Genre {
  id           String             @id @default(uuid())
  slug         GenreSlug          @unique
  books        BookGenre[]
  translations GenreTranslation[]
}

model Book {
  id              String        @id @default(uuid())
  title           String
  author          String
  addedAt         DateTime      @default(now())
  readingStatus   ReadingStatus @default(WANT_TO_READ)
  rating          Int?          @db.SmallInt
  pageCount       Int?
  imageUrl        String?
  imagePublicId   String?
  description     String?
  publicationYear Int?
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  genres          BookGenre[]
  comments        Comment[]
}

model BookGenre {
  bookId  String
  genreId String

  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId])
}

model Comment {
  id       String          @id @default(uuid())
  content  String
  addedAt  DateTime        @default(now())
  authorId String
  author   User            @relation(fields: [authorId], references: [id])
  parentId String?
  parent   Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]       @relation("CommentReplies")
  ratings  CommentRating[]
  Book     Book?           @relation(fields: [bookId], references: [id])
  bookId   String?
}

model CommentRating {
  id        String  @id @default(uuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value Int // +1 = upvote, -1 = downvote

  @@unique([commentId, userId]) // jeden głos użytkownika na komentarz
}
